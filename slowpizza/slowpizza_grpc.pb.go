// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: slowpizza.proto

package slowpizza

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryClient is the client API for Delivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryClient interface {
	OrderItem(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error)
	OrderMultipleItems(ctx context.Context, opts ...grpc.CallOption) (Delivery_OrderMultipleItemsClient, error)
}

type deliveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryClient(cc grpc.ClientConnInterface) DeliveryClient {
	return &deliveryClient{cc}
}

func (c *deliveryClient) OrderItem(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := c.cc.Invoke(ctx, "/slowpizza.Delivery/OrderItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) OrderMultipleItems(ctx context.Context, opts ...grpc.CallOption) (Delivery_OrderMultipleItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Delivery_ServiceDesc.Streams[0], "/slowpizza.Delivery/OrderMultipleItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &deliveryOrderMultipleItemsClient{stream}
	return x, nil
}

type Delivery_OrderMultipleItemsClient interface {
	Send(*OrderRequest) error
	Recv() (*OrderReply, error)
	grpc.ClientStream
}

type deliveryOrderMultipleItemsClient struct {
	grpc.ClientStream
}

func (x *deliveryOrderMultipleItemsClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deliveryOrderMultipleItemsClient) Recv() (*OrderReply, error) {
	m := new(OrderReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeliveryServer is the server API for Delivery service.
// All implementations must embed UnimplementedDeliveryServer
// for forward compatibility
type DeliveryServer interface {
	OrderItem(context.Context, *OrderRequest) (*OrderReply, error)
	OrderMultipleItems(Delivery_OrderMultipleItemsServer) error
	mustEmbedUnimplementedDeliveryServer()
}

// UnimplementedDeliveryServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryServer struct {
}

func (UnimplementedDeliveryServer) OrderItem(context.Context, *OrderRequest) (*OrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItem not implemented")
}
func (UnimplementedDeliveryServer) OrderMultipleItems(Delivery_OrderMultipleItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method OrderMultipleItems not implemented")
}
func (UnimplementedDeliveryServer) mustEmbedUnimplementedDeliveryServer() {}

// UnsafeDeliveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServer will
// result in compilation errors.
type UnsafeDeliveryServer interface {
	mustEmbedUnimplementedDeliveryServer()
}

func RegisterDeliveryServer(s grpc.ServiceRegistrar, srv DeliveryServer) {
	s.RegisterService(&Delivery_ServiceDesc, srv)
}

func _Delivery_OrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).OrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slowpizza.Delivery/OrderItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).OrderItem(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_OrderMultipleItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliveryServer).OrderMultipleItems(&deliveryOrderMultipleItemsServer{stream})
}

type Delivery_OrderMultipleItemsServer interface {
	Send(*OrderReply) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type deliveryOrderMultipleItemsServer struct {
	grpc.ServerStream
}

func (x *deliveryOrderMultipleItemsServer) Send(m *OrderReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deliveryOrderMultipleItemsServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Delivery_ServiceDesc is the grpc.ServiceDesc for Delivery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Delivery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slowpizza.Delivery",
	HandlerType: (*DeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderItem",
			Handler:    _Delivery_OrderItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OrderMultipleItems",
			Handler:       _Delivery_OrderMultipleItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "slowpizza.proto",
}
